[{"grab":"**Hello world!!!**","views":"- `cargo new <project_name>` to create a new project with proper setup\n- `cargo build` to build the project and the run `./target/build/<build_name>` in thesame directory\n- `cargo run   ` to build and run the project\n- `cargo check ` check the validity of the code without building, see if it compiles without producing executable\n","tags":[]},{"grab":"`mut` and `let` --- > and shadowing","views":"to use thesame variable several time with diffferent type conversion from the previous type or reassined\n\n```rust\n\n//re-assigned\nlet x = 5;\nlet x = x +1\n\n// type conversion\nlet space = \"    \";\nlet space = space.len(); // callsed shadowing\n```\n\nbut same won't work for  type conversion\n\n```rust\n\nlet mut x = 5;\nx = x +1 // works\n\nlet space = \"    \";\nspace = space.len(); //output error\n```\n","tags":["rust"]},{"grab":"constant","views":"constant should not be return as function variable. need to be constantly defined for the compiler\n\n```rust\nconst THREE_DAYS: u32 = 24 * 3\n```","tags":["rust"]},{"grab":"loop keyword","views":"```rust\n\nloop {\n//expression\n//statement\n\nbreak variable // this returns the variable from the loop\n}\n```\n\nloop can be assigned\n\n```rust\nlet mut counter = 2;\nlet f = loop {\n    counter += 1;\n\n   if counter == 10 {\n    break counter * 2;\n    }\n\n}\n```\n\nmultiple loop can be stopped with label\n\n```rust\n'loop_label: loop {\n\n// inner loop \n   loop {\n     break 'loop_label;\n   }\n```","tags":[]}]