[{"grab":"## Box<T>\n\nuseful for when\n\n* you have type whose size can't be know at compiler time\n* you want to own a value and care only it is a type that implements a particular trait\n* you have large amount of data you want to transfer ownership without copying the data","views":"## Infinit Recursive example\n\nwe have\n\n```rust\n enum List {\n    Cons(132, List),\n    Nil,\n}\n\nuse crate::List::{Cons, Nil};\n\nfn main() {\n    let list = Cons(1, Cons(2, Cons(3, Nil)));\n}\n```\n\nthis will output error, reason be that rust try to define the size of List, the size of enum is the size of the largest variant.\nso Con point to 132 + List has the size, and List point to cons and cons point to list which is infinity\n\n![](https://doc.rust-lang.org/book/img/trpl15-01.svg)\n\nInstead we can use `Box<T>`\n\n```rust\nenum List {\n    Cons(i32, Box<List>),\n    Nil,\n}\nfn main() {\n    let list = Cons(1, Box::new(Cons(2, Box::new(Cons(3, Box::new(Nil))))));\n}\n\n```\n\nBox<List> is a pointer to List , and pointer do have a fixed size.\n\n\nBox implement `Deref` trait which makes it usable has a reference and also `Drop` trait make it get cleanup whenever its out of scope.","tags":[]}]