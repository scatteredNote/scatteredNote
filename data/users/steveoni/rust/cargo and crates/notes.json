[{"grab":"## Customizing build with release Profiles","views":"for dev\n```sh\n\ncargo build\n```\n\nbuild for release\n\n```sh\n\ncargo build --release\n```\n\ndifference  between both is that rust set a default value in cargo.toml\n\n```\n[profile.dev]\nopt-level = 0\n\n[profile.release]\nopt-level =3\n\n```\n\noptimization ranges from 0-3","tags":["rust"]},{"grab":"## Publishing a crates to crates.io","views":"Documentation is added via comment\n\n```rust\n/// Adds one to the number given.\n///\n/// # Examples\n///\n/// ```\n/// let arg = 5;\n/// let answer = my_crate::add_one(arg);\n///\n/// assert_eq!(6, answer);\n/// ```\npub fn add_one(x: i32) -> i32 {\n    x + 1\n}\n\n```\n\nnote when you run test, cargo also run the documentation code test\nthe documentation will look like this\n![](https://doc.rust-lang.org/book/img/trpl14-01.png)\n\nDocumentation have different sections\n\ne.g `#Examples` , `#Panics` , `#Errors` etc\n\nalso you can add file description, at the begining of the file\n\nsrc/lib.rs\n\n```rust\n\n//! # My Crate\n//!\n//! `my_crate` is a collection of utilities to make performing certain\n//! calculations more convenient.\n\n/// Adds one to the number given.\n// --snip--\n```\n\nit should look like this\n![](https://doc.rust-lang.org/book/img/trpl14-02.png)\n\n\n\n","tags":[]},{"grab":"exportin a convenient api with     pub use`","views":"Let say you have this \n\n```rust\n//! # Art\n//!\n//! A library for modeling artistic concepts.\n\npub mod kinds {\n    /// The primary colors according to the RYB color model.\n    pub enum PrimaryColor {\n        Red,\n        Yellow,\n        Blue,\n    }\n\n    /// The secondary colors according to the RYB color model.\n    pub enum SecondaryColor {\n        Orange,\n        Green,\n        Purple,\n    }\n}\n\npub mod utils {\n    use crate::kinds::*;\n\n    /// Combines two primary colors in equal amounts to create\n    /// a secondary color.\n    pub fn mix(c1: PrimaryColor, c2: PrimaryColor) -> SecondaryColor {\n        // --snip--\n    }\n}\n```\n\nand is displayed like this\n![](https://doc.rust-lang.org/book/img/trpl14-03.png)\n\nhas you can see it does not contain enum object in kind, so not visible for users\n\nbetter way is to re-export in same file\n\n```rust\n\npub use self::kinds::PrimaryColor;\npub use self::kinds::SecondaryColor;\npub use self::utils::mix;\n\n\n// and export from another crate easily like this\n\nuse art::mix;\nuse art::PrimaryColor;\n\n```\n\nand here is how the documentation will look like\n\n![](https://doc.rust-lang.org/book/img/trpl14-04.png)\n","tags":[]}]