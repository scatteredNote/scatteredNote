[{"grab":"## Customizing build with release Profiles","views":"for dev\n```sh\n\ncargo build\n```\n\nbuild for release\n\n```sh\n\ncargo build --release\n```\n\ndifference  between both is that rust set a default value in cargo.toml\n\n```\n[profile.dev]\nopt-level = 0\n\n[profile.release]\nopt-level =3\n\n```\n\noptimization ranges from 0-3","tags":["rust"]},{"grab":"## Publishing a crates to crates.io","views":"Documentation is added via comment\n\n```rust\n/// Adds one to the number given.\n///\n/// # Examples\n///\n/// ```\n/// let arg = 5;\n/// let answer = my_crate::add_one(arg);\n///\n/// assert_eq!(6, answer);\n/// ```\npub fn add_one(x: i32) -> i32 {\n    x + 1\n}\n\n```\n\nnote when you run test, cargo also run the documentation code test\nthe documentation will look like this\n![](https://doc.rust-lang.org/book/img/trpl14-01.png)\n\nDocumentation have different sections\n\ne.g `#Examples` , `#Panics` , `#Errors` etc\n\nalso you can add file description, at the begining of the file\n\nsrc/lib.rs\n\n```rust\n\n//! # My Crate\n//!\n//! `my_crate` is a collection of utilities to make performing certain\n//! calculations more convenient.\n\n/// Adds one to the number given.\n// --snip--\n```\n\nit should look like this\n![](https://doc.rust-lang.org/book/img/trpl14-02.png)\n\n\n\n","tags":[]}]